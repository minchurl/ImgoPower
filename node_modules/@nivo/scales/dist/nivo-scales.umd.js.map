{"version":3,"file":"nivo-scales.umd.js","sources":["../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../src/timeHelpers.ts","../src/linearScale.ts","../src/pointScale.ts","../src/bandScale.ts","../src/timeScale.ts","../src/logScale.ts","../src/symlogScale.ts","../src/compute.ts"],"sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import { timeParse, utcParse } from 'd3-time-format'\n\nexport const timePrecisions = [\n    'millisecond',\n    'second',\n    'minute',\n    'hour',\n    'day',\n    'month',\n    'year',\n] as const\n\nexport type TIME_PRECISION = typeof timePrecisions[number]\n\nexport const precisionCutOffs: ((date: Date) => void)[] = [\n    date => date.setMilliseconds(0),\n    date => date.setSeconds(0),\n    date => date.setMinutes(0),\n    date => date.setHours(0),\n    date => date.setDate(1),\n    date => date.setMonth(0),\n]\n\nexport const precisionCutOffsByType: Record<TIME_PRECISION, ((date: Date) => void)[]> = {\n    millisecond: [],\n    second: precisionCutOffs.slice(0, 1),\n    minute: precisionCutOffs.slice(0, 2),\n    hour: precisionCutOffs.slice(0, 3),\n    day: precisionCutOffs.slice(0, 4),\n    month: precisionCutOffs.slice(0, 5),\n    year: precisionCutOffs.slice(0, 6),\n}\n\nexport const createPrecisionMethod = (precision: TIME_PRECISION) => (date: Date) => {\n    precisionCutOffsByType[precision].forEach(cutOff => {\n        cutOff(date)\n    })\n\n    return date\n}\n\nexport const createDateNormalizer = ({\n    format = 'native',\n    precision = 'millisecond',\n    useUTC = true,\n}: {\n    format?: 'native' | string\n    precision?: TIME_PRECISION\n    useUTC?: boolean\n}) => {\n    const precisionFn = createPrecisionMethod(precision)\n\n    return (value: Date | string | undefined) => {\n        if (value === undefined) {\n            return value\n        }\n\n        if (format === 'native' || value instanceof Date) {\n            return precisionFn(value as Date)\n        }\n\n        const parseTime = useUTC ? utcParse(format) : timeParse(format)\n        return precisionFn(parseTime(value as string) as Date)\n    }\n}\n","import { NumberValue, scaleLinear } from 'd3-scale'\nimport { ScaleLinearSpec, ScaleLinear, ComputedSerieAxis, ScaleAxis } from './types'\n\nexport const createLinearScale = <Output extends NumberValue>(\n    {\n        min = 0,\n        max = 'auto',\n        stacked = false,\n        reverse = false,\n        clamp = false,\n        nice = false,\n    }: ScaleLinearSpec,\n    data: ComputedSerieAxis<Output>,\n    size: number,\n    axis: ScaleAxis\n) => {\n    let minValue: NumberValue\n    if (min === 'auto') {\n        minValue = stacked === true ? data.minStacked ?? 0 : data.min\n    } else {\n        minValue = min\n    }\n\n    let maxValue: NumberValue\n    if (max === 'auto') {\n        maxValue = stacked === true ? data.maxStacked ?? 0 : data.max\n    } else {\n        maxValue = max\n    }\n\n    const scale = scaleLinear<number, Output>()\n        .rangeRound(axis === 'x' ? [0, size] : [size, 0])\n        .domain(reverse ? [maxValue, minValue] : [minValue, maxValue])\n        .clamp(clamp)\n\n    if (nice === true) scale.nice()\n    else if (typeof nice === 'number') scale.nice(nice)\n\n    const typedScale = (scale as unknown) as ScaleLinear<number>\n    typedScale.type = 'linear'\n    typedScale.stacked = stacked\n\n    return typedScale\n}\n","import { scalePoint } from 'd3-scale'\nimport { ComputedSerieAxis, ScalePoint, ScalePointSpec, StringValue } from './types'\n\nexport const createPointScale = <Input extends StringValue>(\n    _spec: ScalePointSpec,\n    data: ComputedSerieAxis<Input>,\n    size: number\n) => {\n    const scale = scalePoint<Input>().range([0, size]).domain(data.all)\n\n    const typedScale = scale as ScalePoint<Input>\n    typedScale.type = 'point'\n\n    return typedScale\n}\n","import { scaleBand } from 'd3-scale'\nimport { ComputedSerieAxis, ScaleBand, ScaleBandSpec, StringValue, ScaleAxis } from './types'\n\nexport const createBandScale = <Input extends StringValue>(\n    { round = true }: ScaleBandSpec,\n    data: ComputedSerieAxis<Input>,\n    size: number,\n    axis: ScaleAxis\n) => {\n    const scale = scaleBand<Input>()\n        .range(axis === 'x' ? [0, size] : [size, 0])\n        .domain(data.all)\n        .round(round)\n\n    const typedScale = scale as ScaleBand<Input>\n    typedScale.type = 'band'\n\n    return typedScale\n}\n","import { NumberValue, scaleTime, scaleUtc } from 'd3-scale'\nimport { createDateNormalizer } from './timeHelpers'\nimport { ComputedSerieAxis, ScaleTime, ScaleTimeSpec } from './types'\n\nexport const createTimeScale = <Input extends Date | NumberValue>(\n    {\n        format = 'native',\n        precision = 'millisecond',\n        min = 'auto',\n        max = 'auto',\n        useUTC = true,\n        nice = false,\n    }: ScaleTimeSpec,\n    data: ComputedSerieAxis<string | Date>,\n    size: number\n) => {\n    const normalize = createDateNormalizer({ format, precision, useUTC })\n\n    let minValue: Date | undefined\n    if (min === 'auto') {\n        minValue = normalize(data.min)\n    } else if (format !== 'native') {\n        minValue = normalize(min)\n    } else {\n        minValue = min as Date\n    }\n\n    let maxValue: Date | undefined\n    if (max === 'auto') {\n        maxValue = normalize(data.max)\n    } else if (format !== 'native') {\n        maxValue = normalize(max)\n    } else {\n        maxValue = max as Date\n    }\n\n    const scale = useUTC ? scaleUtc() : scaleTime()\n\n    scale.range([0, size])\n\n    if (minValue && maxValue) scale.domain([minValue, maxValue])\n\n    if (nice === true) scale.nice()\n    else if (typeof nice === 'object' || typeof nice === 'number') scale.nice(nice)\n\n    const typedScale = (scale as unknown) as ScaleTime<Input>\n\n    typedScale.type = 'time'\n    typedScale.useUTC = useUTC\n\n    return typedScale\n}\n","import { scaleLog } from 'd3-scale'\nimport { ComputedSerieAxis, ScaleAxis, ScaleLog, ScaleLogSpec } from './types'\n\nexport const createLogScale = (\n    { base = 10, min = 'auto', max = 'auto' }: ScaleLogSpec,\n    data: ComputedSerieAxis<number>,\n    size: number,\n    axis: ScaleAxis\n) => {\n    const hasZero = data.all.some(v => v === 0)\n    if (hasZero) {\n        throw new Error(`a log scale domain must not include or cross zero`)\n    }\n\n    let sign: number\n    let hasMixedSign = false\n    data.all\n        .filter(v => v != null)\n        .forEach(v => {\n            if (hasMixedSign) return\n            if (sign === undefined) {\n                sign = Math.sign(v)\n            } else if (Math.sign(v) !== sign) {\n                hasMixedSign = true\n            }\n        })\n\n    if (hasMixedSign) {\n        throw new Error(`a log scale domain must be strictly-positive or strictly-negative`)\n    }\n\n    let minValue: number\n    if (min === 'auto') {\n        minValue = data.min\n    } else {\n        minValue = min\n    }\n\n    let maxValue: number\n    if (max === 'auto') {\n        maxValue = data.max\n    } else {\n        maxValue = max\n    }\n\n    const scale = scaleLog<number, number>()\n        .domain([minValue, maxValue])\n        .rangeRound(axis === 'x' ? [0, size] : [size, 0])\n        .base(base)\n        .nice()\n\n    const typedScale = scale as ScaleLog\n    typedScale.type = 'log'\n\n    return scale\n}\n","import { scaleSymlog } from 'd3-scale'\nimport { ComputedSerieAxis, ScaleAxis, ScaleSymlog, ScaleSymlogSpec } from './types'\n\nexport const createSymlogScale = (\n    { constant = 1, min = 'auto', max = 'auto', reverse = false }: ScaleSymlogSpec,\n    data: ComputedSerieAxis<number>,\n    size: number,\n    axis: ScaleAxis\n) => {\n    let minValue: number\n    if (min === 'auto') {\n        minValue = data.min\n    } else {\n        minValue = min\n    }\n\n    let maxValue: number\n    if (max === 'auto') {\n        maxValue = data.max\n    } else {\n        maxValue = max\n    }\n\n    const scale = scaleSymlog<number, number>()\n        .constant(constant)\n        .rangeRound(axis === 'x' ? [0, size] : [size, 0])\n        .nice()\n\n    if (reverse === true) scale.domain([maxValue, minValue])\n    else scale.domain([minValue, maxValue])\n\n    const typedScale = scale as ScaleSymlog\n    typedScale.type = 'symlog'\n\n    return typedScale\n}\n","import uniq from 'lodash/uniq'\nimport uniqBy from 'lodash/uniqBy'\nimport sortBy from 'lodash/sortBy'\nimport last from 'lodash/last'\nimport isDate from 'lodash/isDate'\nimport { createDateNormalizer } from './timeHelpers'\nimport { ScaleAxis, ScaleSpec, Series, ScaleValue, SerieAxis, ComputedSerieAxis } from './types'\nimport { createLinearScale } from './linearScale'\nimport { createPointScale } from './pointScale'\nimport { createBandScale } from './bandScale'\nimport { createTimeScale } from './timeScale'\nimport { createLogScale } from './logScale'\nimport { createSymlogScale } from './symlogScale'\n\ntype XY = ReturnType<typeof generateSeriesXY>\n\ntype StackedXY = {\n    [K in keyof XY]: XY[K] & {\n        maxStacked: number\n        minStacked: number\n    }\n}\n\ntype InputXYSeries = Record<'x' | 'y', number | string | Date | null>\n\ninterface Data {\n    x: number\n    xStacked: number | null\n    y: number\n    yStacked: number | null\n\n    // Allow template literal `xStacked/yStacked` to be set on line 213\n    [key: string]: number | null\n}\n\ntype XYSeries = InputXYSeries & {\n    data: Data[]\n}\n\ninterface ComputedXYSeries extends InputXYSeries {\n    data: Array<{\n        data: Data\n        position: {\n            x: ScaleValue | null\n            y: ScaleValue | null\n        }\n    }>\n}\n\ntype Compare = <T>(a: T, b: T) => boolean\n\nexport const getOtherAxis = (axis: ScaleAxis): ScaleAxis => (axis === 'x' ? 'y' : 'x')\n\nexport const compareValues = (a: string | number, b: string | number) => a === b\nexport const compareDateValues = (a: Date, b: Date) => a.getTime() === b.getTime()\n\nexport function computeScale<Input extends ScaleValue>(\n    spec: ScaleSpec,\n    data: ComputedSerieAxis<any>,\n    size: number,\n    axis: ScaleAxis\n) {\n    switch (spec.type) {\n        case 'linear':\n            return createLinearScale(spec, data, size, axis)\n        case 'point':\n            return createPointScale<Input>(spec, data, size)\n        case 'band':\n            return createBandScale<Input>(spec, data, size, axis)\n        case 'time':\n            return createTimeScale(spec, data, size)\n        case 'log':\n            return createLogScale(spec, data, size, axis)\n        case 'symlog':\n            return createSymlogScale(spec, data, size, axis)\n        default:\n            throw new Error('invalid scale spec')\n    }\n}\n\nexport const computeXYScalesForSeries = (\n    _series: XYSeries[],\n    xScaleSpec: ScaleSpec,\n    yScaleSpec: ScaleSpec,\n    width: number,\n    height: number\n) => {\n    const series = _series.map(serie => ({\n        ...serie,\n        data: serie.data.map(d => ({ data: { ...d } })),\n    })) as ComputedXYSeries[]\n\n    const xy = generateSeriesXY(series, xScaleSpec, yScaleSpec)\n    if ('stacked' in xScaleSpec && xScaleSpec.stacked === true) {\n        stackX(xy as StackedXY, series)\n    }\n    if ('stacked' in yScaleSpec && yScaleSpec.stacked === true) {\n        stackY(xy as StackedXY, series)\n    }\n\n    const xScale = computeScale(xScaleSpec, xy.x, width, 'x')\n    const yScale = computeScale(yScaleSpec, xy.y, height, 'y')\n\n    series.forEach(serie => {\n        serie.data.forEach(d => {\n            d.position = {\n                x:\n                    'stacked' in xScale && xScale.stacked === true\n                        ? d.data.xStacked === null\n                            ? null\n                            : xScale(d.data.xStacked)\n                        : d.data.x === null\n                        ? null\n                        : xScale(d.data.x) ?? null,\n                y:\n                    'stacked' in yScale && yScale.stacked === true\n                        ? d.data.yStacked === null\n                            ? null\n                            : yScale(d.data.yStacked)\n                        : d.data.y === null\n                        ? null\n                        : yScale(d.data.y) ?? null,\n            }\n        })\n    })\n\n    return {\n        ...xy,\n        series,\n        xScale,\n        yScale,\n    }\n}\n\nexport const generateSeriesXY = <XValue extends ScaleValue, YValue extends ScaleValue>(\n    series: Series<XValue, YValue>,\n    xScaleSpec: ScaleSpec,\n    yScaleSpec: ScaleSpec\n) => ({\n    x: generateSeriesAxis<'x', XValue>(series, 'x', xScaleSpec),\n    y: generateSeriesAxis<'y', YValue>(series, 'y', yScaleSpec),\n})\n\n/**\n * Normalize data according to scale type, (time => Date, linear => Number)\n * compute sorted unique values and min/max.\n */\nexport const generateSeriesAxis = <Axis extends ScaleAxis, Value extends ScaleValue>(\n    series: SerieAxis<Axis, Value>,\n    axis: Axis,\n    scaleSpec: ScaleSpec,\n    {\n        getValue = d => d.data[axis],\n        setValue = (d, v) => {\n            d.data[axis] = v\n        },\n    }: {\n        getValue?: (d: { data: Record<Axis, Value | null> }) => Value | null\n        setValue?: (d: { data: Record<Axis, Value | null> }, v: Value) => void\n    } = {}\n) => {\n    if (scaleSpec.type === 'linear') {\n        series.forEach(serie => {\n            serie.data.forEach(d => {\n                const value = getValue(d)\n\n                if (value) {\n                    setValue(d, (parseFloat(String(value)) as unknown) as Value)\n                }\n            })\n        })\n    } else if (scaleSpec.type === 'time' && scaleSpec.format !== 'native') {\n        // `native` means we already have Date instances,\n        // otherwise we have to convert the values to Date.\n        const parseTime = createDateNormalizer(scaleSpec)\n\n        series.forEach(serie => {\n            serie.data.forEach(d => {\n                const value = getValue(d)\n\n                if (value) {\n                    setValue(d, (parseTime(value as Date) as unknown) as Value)\n                }\n            })\n        })\n    }\n\n    const values: unknown[] = []\n\n    series.forEach(serie => {\n        serie.data.forEach(d => {\n            values.push(getValue(d))\n        })\n    })\n\n    switch (scaleSpec.type) {\n        case 'linear': {\n            const all = sortBy(uniq(values as number[]), v => v)\n\n            return { all, min: Math.min(...all), max: Math.max(...all) }\n        }\n        case 'time': {\n            const all = uniqBy(values as Date[], v => v.getTime())\n                .slice(0)\n                .sort((a, b) => b.getTime() - a.getTime())\n                .reverse()\n\n            return { all, min: all[0], max: last(all) }\n        }\n        default: {\n            const all = uniq(values)\n\n            return { all, min: all[0], max: last(all) }\n        }\n    }\n}\n\nexport const stackAxis = (axis: ScaleAxis, xy: StackedXY, series: ComputedXYSeries[]) => {\n    const otherAxis = getOtherAxis(axis)\n    const all: number[] = []\n\n    xy[otherAxis].all.forEach(v => {\n        const compare = (isDate(v) ? compareDateValues : compareValues) as Compare\n        const stack: Array<number | null> = []\n\n        series.forEach(serie => {\n            const datum = serie.data.find(d => compare(d.data[otherAxis], v))\n            let value = null\n            let stackValue = null\n\n            if (datum !== undefined) {\n                value = datum.data[axis]\n                if (value !== null) {\n                    const head = last(stack)\n                    if (head === undefined) {\n                        stackValue = value\n                    } else if (head !== null) {\n                        stackValue = head + value\n                    }\n                }\n\n                datum.data[`${axis}Stacked`] = stackValue\n            }\n\n            stack.push(stackValue)\n\n            if (stackValue !== null) {\n                all.push(stackValue)\n            }\n        })\n    })\n\n    xy[axis].minStacked = Math.min(...all)\n    xy[axis].maxStacked = Math.max(...all)\n}\n\nconst stackX = (xy: StackedXY, series: ComputedXYSeries[]) => stackAxis('x', xy, series)\nconst stackY = (xy: StackedXY, series: ComputedXYSeries[]) => stackAxis('y', xy, series)\n"],"names":["arrayLikeToArray","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","defineProperty","timePrecisions","precisionCutOffs","date","setMilliseconds","setSeconds","setMinutes","setHours","setDate","setMonth","precisionCutOffsByType","millisecond","second","slice","minute","hour","day","month","year","createPrecisionMethod","precision","forEach","cutOff","createDateNormalizer","format","useUTC","precisionFn","value","undefined","Date","parseTime","utcParse","timeParse","createLinearScale","data","size","axis","min","max","stacked","reverse","clamp","nice","minValue","minStacked","maxValue","maxStacked","scale","scaleLinear","rangeRound","domain","typedScale","type","createPointScale","_spec","scalePoint","range","all","createBandScale","round","scaleBand","createTimeScale","normalize","scaleUtc","scaleTime","createLogScale","base","hasZero","some","v","Error","sign","hasMixedSign","filter","Math","scaleLog","createSymlogScale","constant","scaleSymlog","getOtherAxis","compareValues","a","b","compareDateValues","getTime","computeScale","spec","computeXYScalesForSeries","_series","xScaleSpec","yScaleSpec","width","height","series","map","serie","d","xy","generateSeriesXY","stackX","stackY","xScale","x","yScale","y","position","xStacked","yStacked","generateSeriesAxis","scaleSpec","getValue","setValue","parseFloat","String","values","push","sortBy","uniq","uniqBy","sort","last","stackAxis","otherAxis","compare","isDate","stack","datum","find","stackValue","head"],"mappings":"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"}